AWSTemplateFormatVersion: 2010-09-09
Description: >-
  AWS CloudFormation Sample Template ELBWithLockedDownAutoScaledInstances is
  modified by Talha. This template creates two Amazon EC2 instances and an 
  Application Load Balancer with Auto Scaling Group and only works in Orgeon
  and North Virginia Regions. The instances and ELB are assigned to their 
  specific security groups allowing the instances to be accessible through the 
  ELB URL only. **WARNING** You will be billed for the AWS resources used if 
  you create a stack from this template.
Parameters:
  InstanceType:
    Description: WebServer EC2 instance type
    Type: String
    Default: t2.micro
    AllowedValues:
      - t2.micro
      - t2.small
      - t2.medium
      - t2.large
    ConstraintDescription: must be a valid EC2 instance type.
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instances
    Type: 'AWS::EC2::KeyPair::KeyName'
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  SSHLocation:
    Description: The IP address range that can be used to SSH to the EC2 instances
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
Mappings:
  Regions:
    us-west-2: 
      'ImageId': ami-0e34e7b9ca0ace12d
    us-east-1:
      'ImageId': ami-09d95fab7fff3776c
  SubNets:
    us-east-1:
      'all': 
        - subnet-a19d23ec
        - subnet-280c3e16
        - subnet-0ece3b2f
        - subnet-db4ea1bd
        - subnet-e4fe15bb
        - subnet-91c4649f
    us-west-2:
      'all':
        - subnet-2a1ce252
        - subnet-844881d9
        - subnet-df5d4694
  DefaultVPC:
    us-east-1:
      'vpc': vpc-88ae95f2
    us-west-2:
      'vpc': vpc-46fa973e
Resources:
  WebServerGroup:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties:
      VPCZoneIdentifier: !FindInMap 
        - SubNets
        - !Ref 'AWS::Region'
        - 'all'
      LaunchConfigurationName: !Ref LaunchConfig
      HealthCheckType: ELB
      HealthCheckGracePeriod: 90
      DesiredCapacity: '2'
      MinSize: '1'
      MaxSize: '3'
      TargetGroupARNs:
        - !Ref ALBTargetGroup
      Tags:                
        -                        
          Key: Name
          PropagateAtLaunch: true
          Value: !Sub Web Server of ${AWS::StackName} Stack    
  LaunchConfig:
    Type: 'AWS::AutoScaling::LaunchConfiguration'
    Metadata:
      Comment: Install a simple application
      'AWS::CloudFormation::Init':
        config:
          files:
            /etc/cfn/cfn-hup.conf:
              content: !Join 
                - ''
                - - |
                    [main]
                  - stack=
                  - !Ref 'AWS::StackId'
                  - |+

                  - region=
                  - !Ref 'AWS::Region'
                  - |+

              mode: '000400'
              owner: root
              group: root
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Join 
                - ''
                - - |
                    [cfn-auto-reloader-hook]
                  - |
                    triggers=post.update
                  - >
                    path=Resources.LaunchConfig.Metadata.AWS::CloudFormation::Init
                  - 'action=/opt/aws/bin/cfn-init -v '
                  - '         --stack '
                  - !Ref 'AWS::StackName'
                  - '         --resource LaunchConfig '
                  - '         --region '
                  - !Ref 'AWS::Region'
                  - |+

                  - |
                    runas=root
              mode: '000400'
              owner: root
              group: root
    Properties:
      ImageId: !FindInMap 
        - Regions
        - !Ref 'AWS::Region'
        - 'ImageId'
      SecurityGroups:
        - !Ref InstanceSecurityGroup
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyName
      UserData:
        Fn::Base64: |
          #!/bin/bash -xe
          yum update -y
          yum install python3 -y
          pip3 install flask
          cd /home/ec2-user/
          wget https://raw.githubusercontent.com/talha-01/aws-workshop/master/002-milliseconds-converter/app.py
          mkdir templates
          cd templates
          wget https://raw.githubusercontent.com/talha-01/aws-workshop/master/002-milliseconds-converter/templates/index.html
          wget https://raw.githubusercontent.com/talha-01/aws-workshop/master/002-milliseconds-converter/templates/result.html
          cd ..
          python3 app.py
  ApplicationLoadBalancer:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      Subnets: !FindInMap 
        - SubNets
        - !Ref 'AWS::Region'
        - 'all'
      SecurityGroups: [!Ref ElbSecurityGroup]
  ALBListener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ALBTargetGroup
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: '80'
      Protocol: HTTP
  ALBTargetGroup:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 3
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 5
      VpcId: !FindInMap 
        - DefaultVPC
        - !Ref 'AWS::Region'
        - 'vpc'
  InstanceSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enable SSH access and HTTP access on the inbound port
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          SourceSecurityGroupId: !Select 
            - 0
            - !GetAtt 
              - ApplicationLoadBalancer
              - SecurityGroups
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: !Ref SSHLocation
      VpcId: !FindInMap 
        - DefaultVPC
        - !Ref 'AWS::Region'
        - 'vpc'
  ElbSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enable HTTP access on the inbound port
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: '0.0.0.0/0'
      VpcId: !FindInMap 
        - DefaultVPC
        - !Ref 'AWS::Region'
        - 'vpc'
Outputs:
  URL:
    Description: URL of the website
    Value: !Join 
      - ''
      - - 'http://'
        - !GetAtt 
          - ApplicationLoadBalancer
          - DNSName
